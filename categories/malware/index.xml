<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Malware on Kudo104</title><link>https://kudo104.github.io/categories/malware/</link><description>Recent content in Malware on Kudo104</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 11 Jun 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://kudo104.github.io/categories/malware/index.xml" rel="self" type="application/rss+xml"/><item><title>Owa Bakcdoor on Microsoft Exchange</title><link>https://kudo104.github.io/p/owabackdoor_eng/</link><pubDate>Tue, 11 Jun 2024 00:00:00 +0000</pubDate><guid>https://kudo104.github.io/p/owabackdoor_eng/</guid><description>&lt;img src="https://kudo104.github.io/p/owabackdoor_eng/image.png" alt="Featured image of post Owa Bakcdoor on Microsoft Exchange" />&lt;h2 id="overview">Overview
&lt;/h2>&lt;p>We can see that this is a C# file, using .NET Reactor for obfuscation to avoid analysis and detection by antivirus software.&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/owabackdoor_eng/1.png"
width="772"
height="540"
srcset="https://kudo104.github.io/p/owabackdoor_eng/1_hu5392685959923605402.png 480w, https://kudo104.github.io/p/owabackdoor_eng/1_hu3501558196248378845.png 1024w"
loading="lazy"
alt="Picture 1"
class="gallery-image"
data-flex-grow="142"
data-flex-basis="343px"
>&lt;/p>
&lt;h2 id="unpack">Unpack
&lt;/h2>&lt;p>I used .NETReactorSlayer to unpack, and you can see the difference before and after unpacking.&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/owabackdoor_eng/2.png"
width="1264"
height="448"
srcset="https://kudo104.github.io/p/owabackdoor_eng/2_hu11669915535001047857.png 480w, https://kudo104.github.io/p/owabackdoor_eng/2_hu5447770664351723225.png 1024w"
loading="lazy"
alt="Picture 2"
class="gallery-image"
data-flex-grow="282"
data-flex-basis="677px"
>&lt;/p>
&lt;h2 id="analysis">Analysis
&lt;/h2>&lt;h3 id="stolen">Stolen
&lt;/h3>&lt;p>The malware captures the &lt;code>username&lt;/code> and &lt;code>password&lt;/code> at &lt;code>owa/auth&lt;/code> when login on Mail Exchange. The credentials are stored in C:\windows\temp~ex.dat, XORed with 183, and then saved in base64 format.&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/owabackdoor_eng/3.png"
width="1598"
height="994"
srcset="https://kudo104.github.io/p/owabackdoor_eng/3_hu325131048475010041.png 480w, https://kudo104.github.io/p/owabackdoor_eng/3_hu10702840989169147679.png 1024w"
loading="lazy"
alt="Picture 3"
class="gallery-image"
data-flex-grow="160"
data-flex-basis="385px"
>&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/owabackdoor_eng/4.png"
width="1618"
height="698"
srcset="https://kudo104.github.io/p/owabackdoor_eng/4_hu13543792504166045085.png 480w, https://kudo104.github.io/p/owabackdoor_eng/4_hu4318769882848337094.png 1024w"
loading="lazy"
alt="Picture 4"
class="gallery-image"
data-flex-grow="231"
data-flex-basis="556px"
>&lt;/p>
&lt;p>~ex.dat file of the malware stores the following information:&lt;/p>
&lt;ul>
&lt;li>Timestamp&lt;/li>
&lt;li>Remote IP address&lt;/li>
&lt;li>Username and Password upon login&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">9/6/2024 3:39:01 PM 192.168.204.166 username pasword Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36 302
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="connect">Connect
&lt;/h3>&lt;p>Attacker uses a special sessionid field to connect to the server, allowing them to execute commands and download anything.&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/owabackdoor_eng/6.png"
width="1078"
height="398"
srcset="https://kudo104.github.io/p/owabackdoor_eng/6_hu1140961995089783127.png 480w, https://kudo104.github.io/p/owabackdoor_eng/6_hu6359649243973605639.png 1024w"
loading="lazy"
alt="Picture 5"
class="gallery-image"
data-flex-grow="270"
data-flex-basis="650px"
>&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/owabackdoor_eng/5.png"
width="1276"
height="1222"
srcset="https://kudo104.github.io/p/owabackdoor_eng/5_hu3278808828912518878.png 480w, https://kudo104.github.io/p/owabackdoor_eng/5_hu15651945054711259704.png 1024w"
loading="lazy"
alt="Picture 6"
class="gallery-image"
data-flex-grow="104"
data-flex-basis="250px"
>&lt;/p>
&lt;h2 id="iocs">IOCs
&lt;/h2>&lt;blockquote>
&lt;p>MD5: &lt;code>A13E534F18967AF816FBE0EF83CC2AB8&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>File: &lt;code>~ex.dat&lt;/code>&lt;/p>
&lt;/blockquote></description></item><item><title>Owa Bakcdoor trong Microsoft Exchange</title><link>https://kudo104.github.io/p/owabackdoorvn/</link><pubDate>Tue, 11 Jun 2024 00:00:00 +0000</pubDate><guid>https://kudo104.github.io/p/owabackdoorvn/</guid><description>&lt;img src="https://kudo104.github.io/p/owabackdoorvn/image.png" alt="Featured image of post Owa Bakcdoor trong Microsoft Exchange" />&lt;h2 id="tổng-quan">Tổng quan
&lt;/h2>&lt;p>Ta có thể nhìn thấy thì đây là một file C#, sử dụng .NET Reactor để obfuscation tránh việc phân tích và phát hiện của AV.&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/owabackdoorvn/1.png"
width="772"
height="540"
srcset="https://kudo104.github.io/p/owabackdoorvn/1_hu5392685959923605402.png 480w, https://kudo104.github.io/p/owabackdoorvn/1_hu3501558196248378845.png 1024w"
loading="lazy"
alt="Picture 1"
class="gallery-image"
data-flex-grow="142"
data-flex-basis="343px"
>&lt;/p>
&lt;h2 id="unpack">Unpack
&lt;/h2>&lt;p>Mình sử dụng .NETReactorSlayer để unpack các bạn có thể thấy sự khác biệt trước và sau khi unpack&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/owabackdoorvn/2.png"
width="1264"
height="448"
srcset="https://kudo104.github.io/p/owabackdoorvn/2_hu11669915535001047857.png 480w, https://kudo104.github.io/p/owabackdoorvn/2_hu5447770664351723225.png 1024w"
loading="lazy"
alt="Picture 2"
class="gallery-image"
data-flex-grow="282"
data-flex-basis="677px"
>&lt;/p>
&lt;h2 id="phân-tích">Phân tích
&lt;/h2>&lt;h3 id="stolen">stolen
&lt;/h3>&lt;p>Mã độc thực hiện lấy &lt;code>username&lt;/code> &lt;code>password&lt;/code> tại &lt;code>owa/auth.owa&lt;/code> khi thực hiện đăng nhập trên Mail exchange. Credential được lưu ở &lt;code>C:\windows\temp\~ex.dat&lt;/code>, &lt;code>xor 183&lt;/code> và sau đó sẽ thực hiện lưu dưới dạng base64&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/owabackdoorvn/3.png"
width="1598"
height="994"
srcset="https://kudo104.github.io/p/owabackdoorvn/3_hu325131048475010041.png 480w, https://kudo104.github.io/p/owabackdoorvn/3_hu10702840989169147679.png 1024w"
loading="lazy"
alt="Picture 3"
class="gallery-image"
data-flex-grow="160"
data-flex-basis="385px"
>&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/owabackdoorvn/4.png"
width="1618"
height="698"
srcset="https://kudo104.github.io/p/owabackdoorvn/4_hu13543792504166045085.png 480w, https://kudo104.github.io/p/owabackdoorvn/4_hu4318769882848337094.png 1024w"
loading="lazy"
alt="Picture 4"
class="gallery-image"
data-flex-grow="231"
data-flex-basis="556px"
>&lt;/p>
&lt;p>File ~ex.dat của mã độc lưu các thông tin như sau:&lt;/p>
&lt;ul>
&lt;li>Thời gian&lt;/li>
&lt;li>Remote ip address&lt;/li>
&lt;li>Username và Password khi login&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">9/6/2024 3:39:01 PM 192.168.204.166 username pasword Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36 302
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="kết-nối">Kết nối
&lt;/h3>&lt;p>Kẻ tấn công sử dụng trường sessionid dùng để connect đến server có thể thực thi command, download bất kì&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/owabackdoorvn/6.png"
width="1078"
height="398"
srcset="https://kudo104.github.io/p/owabackdoorvn/6_hu1140961995089783127.png 480w, https://kudo104.github.io/p/owabackdoorvn/6_hu6359649243973605639.png 1024w"
loading="lazy"
alt="Picture 5"
class="gallery-image"
data-flex-grow="270"
data-flex-basis="650px"
>&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/owabackdoorvn/5.png"
width="1276"
height="1222"
srcset="https://kudo104.github.io/p/owabackdoorvn/5_hu3278808828912518878.png 480w, https://kudo104.github.io/p/owabackdoorvn/5_hu15651945054711259704.png 1024w"
loading="lazy"
alt="Picture 6"
class="gallery-image"
data-flex-grow="104"
data-flex-basis="250px"
>&lt;/p>
&lt;h2 id="iocs">IOCs
&lt;/h2>&lt;blockquote>
&lt;p>MD5: &lt;code>A13E534F18967AF816FBE0EF83CC2AB8&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>File: &lt;code>~ex.dat&lt;/code>&lt;/p>
&lt;/blockquote></description></item><item><title>Cobalt Strike</title><link>https://kudo104.github.io/p/cobaltstrike/</link><pubDate>Wed, 28 Dec 2022 00:00:00 +0000</pubDate><guid>https://kudo104.github.io/p/cobaltstrike/</guid><description>&lt;img src="https://kudo104.github.io/p/cobaltstrike/CobaltStrike.jpg" alt="Featured image of post Cobalt Strike" />&lt;p>Cobalt Strike được biết đến là framework mô phỏng tấn công với nhiều mô đun và tính năng. Do tính linh hoạt, Cobalt Strike trở nên phổ biến với redteam, cũng như được sử dụng nhiều bởi các nhóm tấn công mạng.&lt;/p>
&lt;p>Sau quá trình phân tích một số mẫu, chúng tôi ghi nhận nhiều mẫu mã độc được drop xuống máy nạn nhân nhằm triển khai các beacon Cobalt Strike. Đặc điểm chung là đều thực thi các beacon này trong memory nhằm lẩn tránh sự phát hiện của các tiến trình Antivirus.&lt;/p>
&lt;p>Sơ đồ hoạt động:&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/cobaltstrike/1.png"
width="772"
height="135"
srcset="https://kudo104.github.io/p/cobaltstrike/1_hu17856280764076850772.png 480w, https://kudo104.github.io/p/cobaltstrike/1_hu4134363922795603821.png 1024w"
loading="lazy"
alt="Picture 1"
class="gallery-image"
data-flex-grow="571"
data-flex-basis="1372px"
>&lt;/p>
&lt;p>Quá trình xử lý sự cố chúng tôi thu thập được mẫu mã độc có tên cdpsgshims.dll tại thư mục &lt;code>C:\Windows\System32&lt;/code>, rà soát cùng thư mục cũng phát hiện file MapData.dat có ngày và thời gian tạo tương đồng với file cdpsgshims.dll (Ngoài ra cũng phát hiện file này tại đường dẫn &lt;code>C:\ProgramData\Microsoft\MapDat&lt;/code>, đây là file cấu hình được sử dụng để DLL gọi tới về sau)&lt;/p>
&lt;h2 id="phân-tích-cdpsgshimsdll">Phân tích cdpsgshims.dll
&lt;/h2>&lt;p>File DLL này là PE file 64 bit, có tên gốc là TSVIPSrv.dll. Export một số function, đáng chú ý là function là OfficeClickToRun&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/cobaltstrike/2.png"
width="553"
height="335"
srcset="https://kudo104.github.io/p/cobaltstrike/2_hu18019184929931828839.png 480w, https://kudo104.github.io/p/cobaltstrike/2_hu5264395173585337508.png 1024w"
loading="lazy"
alt="Picture 2"
class="gallery-image"
data-flex-grow="165"
data-flex-basis="396px"
>&lt;/p>
&lt;p>Load DLL và phân tích với IDA, quan sát code tại một số hàm thì nhận thấy một số strings đã bị obfuscated, các chuỗi có thể được giải mã bằng cách xor lần với các giá trị 0x4b,0x43,0x51 (KCQ trong bảng mã ASCII)&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/cobaltstrike/3.png"
width="535"
height="479"
srcset="https://kudo104.github.io/p/cobaltstrike/3_hu14898454451183508258.png 480w, https://kudo104.github.io/p/cobaltstrike/3_hu3288766619615543108.png 1024w"
loading="lazy"
alt="Picture 3"
class="gallery-image"
data-flex-grow="111"
data-flex-basis="268px"
>&lt;/p>
&lt;p>Sau khi giải mã thu được thì được một số strings, trong đó có một số strings có nội dung đặc biệt như CreateRemoteThread và đường dẫn &lt;code>C:\\\\ProgramData\\\\Microsoft\\\\MapData\\\MapData.dat&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/cobaltstrike/4.png"
width="553"
height="209"
srcset="https://kudo104.github.io/p/cobaltstrike/4_hu15019691081835029607.png 480w, https://kudo104.github.io/p/cobaltstrike/4_hu15475926162372565112.png 1024w"
loading="lazy"
alt="Picture 4"
class="gallery-image"
data-flex-grow="264"
data-flex-basis="635px"
>&lt;/p>
&lt;p>Khi DLL được load, DLL entrypoint sẽ gọi tới hàm export function OfficeClickToRun. Hàm này thực hiện nhiệm vụ cấu thành đường dẫn tới file &lt;code>MapData.dat&lt;/code> tại đường dẫn &lt;code>C:\\\\ProgramData\\\\Microsoft\\\\MapData\\\MapData.dat&lt;/code> và đọc nội dung file &lt;code>MapData.dat&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/cobaltstrike/5.png"
width="553"
height="424"
srcset="https://kudo104.github.io/p/cobaltstrike/5_hu11855946833354115194.png 480w, https://kudo104.github.io/p/cobaltstrike/5_hu7523392453101382952.png 1024w"
loading="lazy"
alt="Picture 5"
class="gallery-image"
data-flex-grow="130"
data-flex-basis="313px"
>&lt;/p>
&lt;p>Sau khi đọc file, thực hiện giải mã bằng thuật toán với key là SYSTEM. Sau khi giải mã thành công, payload mới sẽ được gọi sẽ được thực thi&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/cobaltstrike/6.png"
width="553"
height="410"
srcset="https://kudo104.github.io/p/cobaltstrike/6_hu6868576623512989750.png 480w, https://kudo104.github.io/p/cobaltstrike/6_hu10280732593413930284.png 1024w"
loading="lazy"
alt="Picture 6"
class="gallery-image"
data-flex-grow="134"
data-flex-basis="323px"
>&lt;/p>
&lt;p>Payload mới là CobaltStrike Beacon HTTPS, đến đây có có thể trích xuất được thông tin cấu hình bằng công cụ CobaltStrikeParser của Sentinel-One hoặc 1768.py của Didier Stevens&lt;/p>
&lt;h2 id="khôi-phục-import-table">Khôi phục Import Table
&lt;/h2>&lt;p>Một cách thủ công khác, sau quá trình giải mã RC4, chúng ta có thể thực hiện dump payload mới xuống. Nếu load thử bằng CFF Explorer sẽ không nhận diện được đây là PE file. Lý do là file đã đổi signature &lt;code>MZ&lt;/code> và &lt;code>PE&lt;/code> thành &lt;code>YA&lt;/code> và &lt;code>IY&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/cobaltstrike/7.png"
width="521"
height="249"
srcset="https://kudo104.github.io/p/cobaltstrike/7_hu1423357130402873574.png 480w, https://kudo104.github.io/p/cobaltstrike/7_hu6720822518059446116.png 1024w"
loading="lazy"
alt="Picture 7"
class="gallery-image"
data-flex-grow="209"
data-flex-basis="502px"
>&lt;/p>
&lt;p>Có thể sửa lại các giá trị trong file từ ‘YA’ thành ‘MZ’ và ‘IY’ thành ‘PE’ bằng các công cụ như HxD hay 010 Editor. Tuy nhiên các thông tin import và các session hầu như đều không còn được nguyên vẹn.&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/cobaltstrike/8.png"
width="553"
height="404"
srcset="https://kudo104.github.io/p/cobaltstrike/8_hu15201850025017157124.png 480w, https://kudo104.github.io/p/cobaltstrike/8_hu5239903738518012370.png 1024w"
loading="lazy"
alt="Picture 8"
class="gallery-image"
data-flex-grow="136"
data-flex-basis="328px"
>&lt;/p>
&lt;p>Load file dump.dll vào IDA để phân tích, sau khi giải mã RC4 ở trên hàm export function v3.28 sẽ được gọi tới và thực thi, gần giống với kĩ thuật ReflectiveLoad.&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/cobaltstrike/9.png"
width="554"
height="98"
srcset="https://kudo104.github.io/p/cobaltstrike/9_hu16650766130123536739.png 480w, https://kudo104.github.io/p/cobaltstrike/9_hu9195201925721092028.png 1024w"
loading="lazy"
alt="Picture 9"
class="gallery-image"
data-flex-grow="565"
data-flex-basis="1356px"
>&lt;/p>
&lt;p>Một chỗ cần lưu ý trong hàm này là nó đọc giá trị NumberOfSybols từ File Header và lưu vào biến key sau đó biến này được sử dụng trong hàm DecryptString.Hàm này có chức năng giải mã các string bảng import table hay là tên các section.&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/cobaltstrike/10.png"
width="553"
height="186"
srcset="https://kudo104.github.io/p/cobaltstrike/10_hu10279650049112125524.png 480w, https://kudo104.github.io/p/cobaltstrike/10_hu10429052100820039375.png 1024w"
loading="lazy"
alt="Picture 10"
class="gallery-image"
data-flex-grow="297"
data-flex-basis="713px"
>&lt;/p>
&lt;ul>
&lt;li>Hàm export function v3.28 này có nhiệm vụ:&lt;/li>
&lt;li>Tìm data PE file trong dll để load vào vùng nhớ process&lt;/li>
&lt;li>Tìm các Module để load các API&lt;/li>
&lt;li>Giải mã các string trong import table để mapped địa chỉ vào vùng nhớ process&lt;/li>
&lt;li>Cuối cùng là thực thi Dll tại DllEntryPoint&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://kudo104.github.io/p/cobaltstrike/12.png"
width="553"
height="419"
srcset="https://kudo104.github.io/p/cobaltstrike/12_hu7512443645419083160.png 480w, https://kudo104.github.io/p/cobaltstrike/12_hu6698242884665028484.png 1024w"
loading="lazy"
alt="Picture 12"
class="gallery-image"
data-flex-grow="131"
data-flex-basis="316px"
>&lt;/p>
&lt;p>Dựa vào các thông tin trên,có thể khôi phục lại bảng import table.Đây là script để khôi phục lại IAT:&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/cobaltstrike/13.png"
width="553"
height="367"
srcset="https://kudo104.github.io/p/cobaltstrike/13_hu1380089288119400848.png 480w, https://kudo104.github.io/p/cobaltstrike/13_hu12711153034902046524.png 1024w"
loading="lazy"
alt="Picture 13"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="361px"
>&lt;/p>
&lt;p>Kết quả sau quá trình khôi phục như sau:&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/cobaltstrike/14.png"
width="553"
height="429"
srcset="https://kudo104.github.io/p/cobaltstrike/14_hu14563706356697082032.png 480w, https://kudo104.github.io/p/cobaltstrike/14_hu3258029131416150056.png 1024w"
loading="lazy"
alt="Picture 14"
class="gallery-image"
data-flex-grow="128"
data-flex-basis="309px"
>&lt;/p>
&lt;h2 id="indicators-of-compromises-iocs">Indicators of Compromises (IOCs)
&lt;/h2>&lt;blockquote>
&lt;p>File name:&lt;/p>
&lt;/blockquote>
&lt;p>cdpsgshims.dll 283A861CD7E1D26325DE39478B305432 (MD5)&lt;/p>
&lt;p>python23.dll 53F030E658E7D95A2DBB5AC9B99176B6 (MD5)&lt;/p>
&lt;p>TmDbgLog.dll 9B12F3471260840953025F2C39B47DCC (MD5)&lt;/p>
&lt;blockquote>
&lt;p>File config:&lt;/p>
&lt;/blockquote>
&lt;p>MapData.dat 6F5A07D59D8B637E38DCA7A1575CD229 (MD5)&lt;/p>
&lt;p>winnt.config DD4E176F33F91E27F557A4D67F9B3331 (MD5)&lt;/p>
&lt;p>mtxstify.scr EE4B2DA99308C3E7EA81C4E1F80C946E (MD5)&lt;/p>
&lt;blockquote>
&lt;p>C2:&lt;/p>
&lt;/blockquote>
&lt;p>didongbuy.com&lt;/p>
&lt;p>news.worldstockhub.com&lt;/p>
&lt;p>18.138.81.223&lt;/p></description></item><item><title>SAMPLE ANALYSIS</title><link>https://kudo104.github.io/p/malware/</link><pubDate>Wed, 01 Jun 2022 00:00:00 +0000</pubDate><guid>https://kudo104.github.io/p/malware/</guid><description>&lt;img src="https://kudo104.github.io/p/malware/cover.jpg" alt="Featured image of post SAMPLE ANALYSIS" />&lt;h1 id="tổng-quan">Tổng quan
&lt;/h1>&lt;p>Load File vào detect it easy và CFF explore để có cái nhìn tổng quan về mẫu mã độc sample.exe&lt;/p>
&lt;ul>
&lt;li>File 32bit&lt;/li>
&lt;li>Dung lượng 730kb nhưng import table chỉ sử dụng 1 số api có thể bị packed&lt;/li>
&lt;/ul>
&lt;h2 id="phân-tích-tỉnh-và-phân-tích-động">Phân tích tỉnh và phân tích động
&lt;/h2>&lt;p>Tool sử dụng Ida&lt;/p>
&lt;ol>
&lt;li>Phân tích file sample.exe&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>Phân tích &amp;amp; rename lại hàm để dễ dàng phân tích:&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://kudo104.github.io/p/malware/Picture1.png"
width="938"
height="634"
srcset="https://kudo104.github.io/p/malware/Picture1_hu3192765381905466249.png 480w, https://kudo104.github.io/p/malware/Picture1_hu590921258287525565.png 1024w"
loading="lazy"
alt="My Image"
class="gallery-image"
data-flex-grow="147"
data-flex-basis="355px"
>&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/malware/Picture3.png"
width="397"
height="120"
srcset="https://kudo104.github.io/p/malware/Picture3_hu15944298079885664940.png 480w, https://kudo104.github.io/p/malware/Picture3_hu5389320035411503881.png 1024w"
loading="lazy"
alt="My Image"
class="gallery-image"
data-flex-grow="330"
data-flex-basis="794px"
>&lt;/p>
&lt;ul>
&lt;li>Dữ liệu mã hóa bằng phép xor khá đơn giản sau khi thử giải mã vài byte đầu thì thấy kí hiệu MZ của cấu trúc PE&lt;/li>
&lt;li>Sử dụng một funtion inject để inject string vào trong câu trúc PE sau khi đã giải mã.Như hình trên thì
String “xmr-usa.dwarfpool.com:8050” tại vị trí 74688 inject vào PE_data&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Xử kí &amp;amp; thực thi PE_data&lt;/p>
&lt;/blockquote>
&lt;p>Hàm sub_13D1350&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/malware/Picture3.png"
width="397"
height="120"
srcset="https://kudo104.github.io/p/malware/Picture3_hu15944298079885664940.png 480w, https://kudo104.github.io/p/malware/Picture3_hu5389320035411503881.png 1024w"
loading="lazy"
alt="My Image"
class="gallery-image"
data-flex-grow="330"
data-flex-basis="794px"
>&lt;/p>
&lt;p>Cấp phát vùng nhớ có quyền thực thi sau đó copy toán bộ PE data vào trong vùng nhớ:&lt;/p>
&lt;blockquote>
&lt;p>Hàm sub_13D12C3&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://kudo104.github.io/p/malware/Picture4.png"
width="650"
height="555"
srcset="https://kudo104.github.io/p/malware/Picture4_hu4563142485605819693.png 480w, https://kudo104.github.io/p/malware/Picture4_hu4635182724903401397.png 1024w"
loading="lazy"
alt="My Image"
class="gallery-image"
data-flex-grow="117"
data-flex-basis="281px"
>&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/malware/Picture5.png"
width="423"
height="141"
srcset="https://kudo104.github.io/p/malware/Picture5_hu13857118712587638792.png 480w, https://kudo104.github.io/p/malware/Picture5_hu7939329065730622537.png 1024w"
loading="lazy"
alt="My Image"
class="gallery-image"
data-flex-grow="300"
data-flex-basis="720px"
>&lt;/p>
&lt;ul>
&lt;li>Hàm này xử lí tìm kiếm địa chỉ IAT của PE_data và sử dụng hàm loadmodule tương ứng để tìm kiếm các địa chỉ tương ứng với các api trong PE_data việc này giống như ánh xạ vào không gian địa chỉ process bằng thủ công thay vì windowloader sẽ có nhiệm vụ này&lt;/li>
&lt;/ul>
&lt;p>Thực thi 1 process khác trong sample.exe&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/malware/Picture6.png"
width="322"
height="184"
srcset="https://kudo104.github.io/p/malware/Picture6_hu455018388139440989.png 480w, https://kudo104.github.io/p/malware/Picture6_hu10886119970126979228.png 1024w"
loading="lazy"
alt="My Image"
class="gallery-image"
data-flex-grow="175"
data-flex-basis="420px"
>&lt;/p>
&lt;p>Sau khi tìm kiếm các các địa chỉ api trên các module kernel32.dll,user32.dll,…thì nó sẽ thực thi file tại AddressOfEntryPoint dựa trên câu trúc PE file&lt;/p>
&lt;p>Để tiện lợi cho việc phân tích thì mình sẽ dump dữ liệu ra thì có 2 cách:&lt;/p>
&lt;ul>
&lt;li>Có thể sử dụng plugin OllDumpEx trong x64dbg để dump&lt;/li>
&lt;li>Dùng idapython&lt;/li>
&lt;/ul>
&lt;p>Sau khi dump đặt tên là dump_sample&lt;/p>
&lt;h2 id="phân-tích-file-dump_sample">Phân tích file dump_sample
&lt;/h2>&lt;p>&lt;img src="https://kudo104.github.io/p/malware/Picture7.png"
width="908"
height="607"
srcset="https://kudo104.github.io/p/malware/Picture7_hu417952925806664133.png 480w, https://kudo104.github.io/p/malware/Picture7_hu9968807492804901066.png 1024w"
loading="lazy"
alt="My Image"
class="gallery-image"
data-flex-grow="149"
data-flex-basis="359px"
>&lt;/p>
&lt;p>Sử dụng api CreateDirectoryW để tạo folder “C:\Users\user\AppData\Local\hjfdWLFJwt”&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/malware/Picture8.png"
width="515"
height="210"
srcset="https://kudo104.github.io/p/malware/Picture8_hu11905528676959961023.png 480w, https://kudo104.github.io/p/malware/Picture8_hu12528766528608506578.png 1024w"
loading="lazy"
alt="My Image"
class="gallery-image"
data-flex-grow="245"
data-flex-basis="588px"
>&lt;/p>
&lt;p>Tại folder mới tạo 1 file executable taskman.exe&lt;/p>
&lt;blockquote>
&lt;p>Hàm registry&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://kudo104.github.io/p/malware/Picture9.png"
width="806"
height="666"
srcset="https://kudo104.github.io/p/malware/Picture9_hu13180873007231259405.png 480w, https://kudo104.github.io/p/malware/Picture9_hu7820278321203610026.png 1024w"
loading="lazy"
alt="My Image"
class="gallery-image"
data-flex-grow="121"
data-flex-basis="290px"
>&lt;/p>
&lt;p>Nếu “SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce” đã được tạo thì sẽ thực hiện lấy giá trị tại “ftwdGcTbXm” và ngược lại&lt;/p>
&lt;h2 id="hàm-handleprocessx32">Hàm handleProcessx32
&lt;/h2>&lt;p>&lt;img src="https://kudo104.github.io/p/malware/Picture10.png"
width="862"
height="635"
srcset="https://kudo104.github.io/p/malware/Picture10_hu10938131579902427972.png 480w, https://kudo104.github.io/p/malware/Picture10_hu7249750285106071885.png 1024w"
loading="lazy"
alt="My Image"
class="gallery-image"
data-flex-grow="135"
data-flex-basis="325px"
>&lt;/p>
&lt;p>Đoạn đầu khá giống với hàm handleProcessx64 việc tạo ra 1 process notepad với cmd =’ -a cryptonight -o stratum+tcp://xmr-usa.dwarfpool.com:8050 -u 4JUdGzvrMFDWrUUwY3toJATSeNwjn54LkCnKBPRzDuhzi5vSepHfUckJNxRL2gjkNrSqtCoRUrEDAgRwsQvVCjZbS3d2ZdUYfaKLkAbBLe -p x -t 2’&lt;/p>
&lt;p>Sau khi hàm này tạo ra process mới thì viết vào vùng nhớ của process đó một cấu trúc PE_data sau đó tiếp tục thực thi process&lt;/p>
&lt;blockquote>
&lt;p>Dump &amp;amp; phân tích PE_data2&lt;/p>
&lt;/blockquote>
&lt;p>Detect it easy thì File bị packed bằng upx sau khi unpacked upx như hình bên dưới:&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/malware/Picture11.png"
width="734"
height="469"
srcset="https://kudo104.github.io/p/malware/Picture11_hu13392328260629593298.png 480w, https://kudo104.github.io/p/malware/Picture11_hu1090543039200512097.png 1024w"
loading="lazy"
alt="My Image"
class="gallery-image"
data-flex-grow="156"
data-flex-basis="375px"
>&lt;/p>
&lt;p>Các option tìm thấy trong hàm handleArg,argv &amp;amp; agrc chính cmd khi tạo với proccess notepad.exe&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/malware/Picture12.png"
width="515"
height="501"
srcset="https://kudo104.github.io/p/malware/Picture12_hu5441004103877108693.png 480w, https://kudo104.github.io/p/malware/Picture12_hu1128775872227687420.png 1024w"
loading="lazy"
alt="My Image"
class="gallery-image"
data-flex-grow="102"
data-flex-basis="246px"
>&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/malware/Picture13.png"
width="851"
height="695"
srcset="https://kudo104.github.io/p/malware/Picture13_hu15423532906734324438.png 480w, https://kudo104.github.io/p/malware/Picture13_hu13692173451533412156.png 1024w"
loading="lazy"
alt="My Image"
class="gallery-image"
data-flex-grow="122"
data-flex-basis="293px"
>&lt;/p>
&lt;ul>
&lt;li>-a Specifiy the algorithm to use: Cryptonight&lt;/li>
&lt;li>
&lt;ul>
&lt;li>o URL of mining server:
stratum+tcp://xmr-usa.dwarfpool.com:8050&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>-u username for mining server&lt;/li>
&lt;li>-p password for mining server&lt;/li>
&lt;li>-t number of miner threads (default: number of processors)&lt;/li>
&lt;/ul>
&lt;p>Sau khi tra các string option trên google tìm được project (&lt;a class="link" href="https://github.com/tpruvot/cpuminer-multi" target="_blank" rel="noopener"
>https://github.com/tpruvot/cpuminer-multi&lt;/a>) so sánh với Pseudocode trên Ida thì khá giống với project này đây là công cụ sử dụng khai thác crypto&lt;/p>
&lt;h2 id="hàm-handleprocessx64">Hàm handleProcessx64
&lt;/h2>&lt;p>&lt;img src="https://kudo104.github.io/p/malware/Picture14.png"
width="1071"
height="253"
srcset="https://kudo104.github.io/p/malware/Picture14_hu6214608710246794722.png 480w, https://kudo104.github.io/p/malware/Picture14_hu13755915592403456845.png 1024w"
loading="lazy"
alt="My Image"
class="gallery-image"
data-flex-grow="423"
data-flex-basis="1015px"
>&lt;/p>
&lt;p>Tạo process notepad.exe với cmd = ‘ -a cryptonight -o stratum+tcp://xmr-usa.dwarfpool.com:8050 -u4JUdGzvrMFDWrUUwY3toJATSeNwjn54LkCnKBPRzDuhzi5vSepHfUckJNxRL2gjkNrSqtCoRUrEDAgRwsQvVCjZbS3d2ZdUYfaKLkAbBLe -p x -t 2&lt;/p>
&lt;p>Sau khi tạo process thì dùng api NtWriteVirtualMemory nó tương tự như WriteProcessMemory cũng có cấu trúc PE được viết vào vùng nhớ process&lt;/p>
&lt;blockquote>
&lt;p>Dump &amp;amp; phân tích processx64&lt;/p>
&lt;/blockquote>
&lt;p>Detect it easy thì File bị packed bằng upx sau khi unpacked upx như hình bên dưới:&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/malware/Picture15.png"
width="740"
height="467"
srcset="https://kudo104.github.io/p/malware/Picture15_hu9375104100582316326.png 480w, https://kudo104.github.io/p/malware/Picture15_hu11265318286991946739.png 1024w"
loading="lazy"
alt="My Image"
class="gallery-image"
data-flex-grow="158"
data-flex-basis="380px"
>&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/malware/Picture16.png"
width="848"
height="516"
srcset="https://kudo104.github.io/p/malware/Picture16_hu13843486658535205105.png 480w, https://kudo104.github.io/p/malware/Picture16_hu15390804375587611370.png 1024w"
loading="lazy"
alt="My Image"
class="gallery-image"
data-flex-grow="164"
data-flex-basis="394px"
>&lt;/p>
&lt;p>Các option tìm thấy trong hàm parse_arg,argv &amp;amp; agrc tương tự như handleProcessx32&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/malware/Picture17.png"
width="634"
height="516"
srcset="https://kudo104.github.io/p/malware/Picture17_hu10352824813628378207.png 480w, https://kudo104.github.io/p/malware/Picture17_hu14566864528155094023.png 1024w"
loading="lazy"
alt="My Image"
class="gallery-image"
data-flex-grow="122"
data-flex-basis="294px"
>&lt;/p>
&lt;h1 id="tổng-kết">Tổng kết
&lt;/h1>&lt;ul>
&lt;li>Mã độc sinh ra proccess notepad nhằm mục đích ẩn đi chương trình khai thác crypto&lt;/li>
&lt;li>Các kĩ thuật đặc biệt sử dụng
Anti-reverse:upx,anti-diassembly,ịnject string&lt;/li>
&lt;li>Mục đích chính của mã độc thực hiện khai thác crypto&lt;/li>
&lt;/ul></description></item></channel></rss>