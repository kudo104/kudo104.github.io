<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CTF on Kudo104</title><link>https://kudo104.github.io/categories/ctf/</link><description>Recent content in CTF on Kudo104</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 05 Dec 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://kudo104.github.io/categories/ctf/index.xml" rel="self" type="application/rss+xml"/><item><title>ASCIS 2022-CTF CHALLENGE</title><link>https://kudo104.github.io/p/ctf_challenge/</link><pubDate>Mon, 05 Dec 2022 00:00:00 +0000</pubDate><guid>https://kudo104.github.io/p/ctf_challenge/</guid><description>&lt;img src="https://kudo104.github.io/p/ctf_challenge/cover.jpg" alt="Featured image of post ASCIS 2022-CTF CHALLENGE" />&lt;p>Tác giả cho 2 file ctf_challenge và output.txt.Đây là một dạng bài phục hồi lại nội dung trong file.&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/ctf_challenge/2.png"
width="749"
height="37"
srcset="https://kudo104.github.io/p/ctf_challenge/2_hu6659355912037391927.png 480w, https://kudo104.github.io/p/ctf_challenge/2_hu6114001629636816413.png 1024w"
loading="lazy"
alt="Picture 1"
class="gallery-image"
data-flex-grow="2024"
data-flex-basis="4858px"
>&lt;/p>
&lt;p>Bỏ vào ida thì biết được chương trình đọc nội dung flag.txt để encrypt&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/ctf_challenge/1.png"
width="670"
height="396"
srcset="https://kudo104.github.io/p/ctf_challenge/1_hu10087601998605371541.png 480w, https://kudo104.github.io/p/ctf_challenge/1_hu7413417090748816681.png 1024w"
loading="lazy"
alt="Picture 2"
class="gallery-image"
data-flex-grow="169"
data-flex-basis="406px"
>&lt;/p>
&lt;p>Tạo file flag.txt và thử thêm nôi dụng là &lt;code>ASCIS{aaaaaaaaa}&lt;/code> để chạy file. Hmm nhìn khá là ảo thử lấy đống hex này sang string thử ,chương trình lại cho ra đúng nội dung của flag.&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/ctf_challenge/3.png"
width="827"
height="61"
srcset="https://kudo104.github.io/p/ctf_challenge/3_hu9934271723705515102.png 480w, https://kudo104.github.io/p/ctf_challenge/3_hu8882740620302092536.png 1024w"
loading="lazy"
alt="Picture 3"
class="gallery-image"
data-flex-grow="1355"
data-flex-basis="3253px"
>&lt;/p>
&lt;p>Tiếp tục re tiếp thì bài này là một dạng vm mình sẽ không nói chi tiết mấy cái này tại thấy dài dòng quá.Bài này cấp phát một vùng nhớ 50 byte có quyền thực thi và set cái tất cả các byte trong vùng nhớ thành 0x90 đây chính là lệnh nop và thêm 2 byte &lt;code>\xEB\xFE&lt;/code> này vào vùng nhớ gần cuối đây chính là lệnh jump nhảy tới chính nó đó.Sau đó nó sẽ tạo Thread thực thi vòng lặp vô tận đợi đến khi mà chương trình gọi &lt;code>SuspendThread&lt;/code> để tạm dừng Thread lại.Sau đó chương trình sẽ tính toán và sẽ thực thi từng câu lệnh một trong vùng nhớ này.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;span class="lnt">75
&lt;/span>&lt;span class="lnt">76
&lt;/span>&lt;span class="lnt">77
&lt;/span>&lt;span class="lnt">78
&lt;/span>&lt;span class="lnt">79
&lt;/span>&lt;span class="lnt">80
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">char *__thiscall sub_321040(char *this, _OWORD *a2)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> LPVOID v3; // eax
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> _OWORD *v4; // ecx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> char *v5; // ecx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int v6; // eax
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int v7; // ecx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int v8; // eax
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> void *v10; // [esp-10h] [ebp-1Ch]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> void *v11; // [esp-Ch] [ebp-18h]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> LPTHREAD_START_ROUTINE lpStartAddress; // [esp+8h] [ebp-4h]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> *this = &amp;amp;VM::`vftable&amp;#39;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> *(this + 2) = this;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> *(this + 12) = 0i64;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> *(this + 28) = 0i64;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> *(this + 11) = 0;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> lpStartAddress = VirtualAlloc(0, 0x50u, 0x3000u, 0x40u);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> *(this + 16) = VirtualAlloc(0, 0x40u, 0x1000u, 0x40u);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> *(this + 14) = VirtualAlloc(0, 0x40u, 0x3000u, 4u);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> v3 = VirtualAlloc(0, 0xC8u, 0x3000u, 4u);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> v10 = *(this + 14);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> *(this + 17) = v3;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> memset(v10, 0, 0x40u);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> memset(*(this + 17), 0, 0x40u);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> memset(*(this + 16), 0, 0x200u);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> memset(lpStartAddress, 144, 0x50u);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> v4 = *(this + 14);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if ( v4 )
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if ( a2 )
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> *v4 = *a2;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> v4[1] = a2[1];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> v4[2] = a2[2];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> v4[3] = a2[3];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> goto LABEL_6;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> memset(v4, 0, 0x40u);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> *errno() = 22;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> invalid_parameter_noinfo();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">LABEL_6:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> v5 = *(this + 17);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if ( v5 )
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> strcpy(v5, &amp;#34;1234567890123456&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> else
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> *errno() = 22;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> invalid_parameter_noinfo();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> *(this + 15) = lpStartAddress;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> *(lpStartAddress + 72) = &amp;#39;\xEB&amp;#39;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> *(*(this + 15) + 73) = &amp;#39;\xFE&amp;#39;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> *(this + 376) = CreateThread(0, 0, lpStartAddress, 0, 0, 0);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Sleep(0x3E8u);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> SuspendThread(*(this + 376));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> *(this + 197) = 65599;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> GetThreadContext(*(this + 376), (this + 788));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> *(this + 237) = *(this + 17);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> *(this + 236) = *(this + 14);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> v6 = *(this + 16);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> v11 = *(this + 376);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> *(this + 241) = 0;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> v7 = v6 + 384;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> *(this + 238) = 0;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> v6 += 32;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> *(this + 240) = 0;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> *(this + 13) = v6;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> *(this + 246) = v6;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> v8 = *(this + 15);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> *(this + 239) = 0;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> *(this + 12) = v7;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> *(this + 242) = v7;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> *(this + 243) = v8;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> SetThreadContext(v11, (this + 788));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return this;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Đáng chú ý trong quá trình debug thì mình bị lỗi segment liên tục thì phát hiện có 1 anti hardware breapoint&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">BOOL __thiscall sub_E1930(int *this)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> void *v3; // [esp-Ch] [ebp-14h]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> void *v4; // [esp-8h] [ebp-10h]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> SuspendThread(this[376]);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> GetThreadContext(this[376], (this + 197));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> v3 = this[15];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> this[243] = v3;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> memset(v3, 0x90, 0x50u);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> *(this[15] + 72) = -21;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> *(this[15] + 73) = -2;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if ( this[198] || this[199] || this[200] || this[201] )
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> *(this[15] + 72) = 0x90;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> *(this[15] + 73) = 0x90;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> v4 = this[376];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> this[198] = 0;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> this[199] = 0;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> this[200] = 0;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> this[201] = 0;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> this[202] = 0;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> this[203] = 0;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return SetThreadContext(v4, (this + 197));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Đến đây mình patch lại chương trình tưởng có thể chạy ngon lành cành đào rồi nhưng không nó lại in ra đúng nối dung của file flag.txt.Mình thử debug tới câu lệnh cuối cùng trong vùng nhớ rồi in ra thì biết được nó tính độ dài của chuỗi và so sánh với 0x24.Hmm chạy ngon rồi haha.&lt;/p>
&lt;p>Mình patch lại như sau:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">BOOL __thiscall sub_321930(int *this)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> void *v3; // [esp-Ch] [ebp-14h]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> void *v4; // [esp-8h] [ebp-10h]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> SuspendThread(this[376]);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> GetThreadContext(this[376], (this + 197));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> v3 = this[15];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> this[243] = v3;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> memset(v3, 144, 0x50u);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> *(this[15] + 72) = &amp;#39;\xEB&amp;#39;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> *(this[15] + 73) = &amp;#39;\xFE&amp;#39;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> v4 = this[376];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> this[198] = 0;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> this[199] = 0;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> this[200] = 0;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> this[201] = 0;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> this[202] = 0;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> this[203] = 0;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return SetThreadContext(v4, (this + 197));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Mình sử dụng mấy câu lẹnh debug_hook của ida không chạy được nên đành chạy tay lấy từng câu lệnh một click đến khi nào chương trình dừng thì thôi do mình lười emulate lại cái code vm :vv&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">import idaapi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">import time
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">f = open(&amp;#34;log.txt&amp;#34;,&amp;#34;a&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">idaapi.run_to(0xB81F93)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">data = []
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># ea là địa chỉ vùng nhớ được cấp phát 50 byte để thực thi câu lệnh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">for ea in range(0x950000,0x950006,1):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> data.append(idc.get_wide_byte(ea))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">s = &amp;#39; &amp;#39;.join([str(elem) for elem in data])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">s += &amp;#34;\n&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">f.write(s)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">f.close()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Sau khi đọc mấy cái code vm này thì biết được đây là mã hóa &lt;code>XTEA&lt;/code>.Đoạn Vm sử dụng Xtea 4 lần mỗi lần là 8 byte ban đầu key là &lt;code>1234567890123456&lt;/code> sau đó nó sẽ thực hiện thay đổi key lần lược như sau xor 4 byte với 0xefbeadde và đặt tại 4 byte tiếp theo.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> 0: 89 78 04 mov DWORD PTR [eax+0x4], edi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0: 8b 1c 24 mov ebx, DWORD PTR [esp]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0: 8b 74 24 04 mov esi, DWORD PTR [esp+0x4]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0: 8b 7c 24 08 mov edi, DWORD PTR [esp+0x8]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0: 8b 56 04 mov edx, DWORD PTR [esi+0x4]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0: bb de ad be ef mov ebx, 0xefbeadde
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0: 31 da xor edx, ebx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0: 89 56 08 mov DWORD PTR [esi+0x8], edx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0: 81 c7 08 00 00 00 add edi, 0x8
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0: 89 7d 08 mov DWORD PTR [ebp+0x8], edi
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Đọc các đoạn tiếp theo mình được key và script giải mã flag:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#include &amp;lt;stdint.h&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#include &amp;lt;stdio.h&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">void&lt;/span> &lt;span class="n">decrypt&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">uint32_t&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">uint32_t&lt;/span> &lt;span class="n">k&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">uint32_t&lt;/span> &lt;span class="n">v0&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">v1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">sum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0xf1bbcdc8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">/*&lt;/span> &lt;span class="n">set&lt;/span> &lt;span class="n">up&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">sum&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">delta&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="mh">0xFFFFFFFF&lt;/span> &lt;span class="o">*/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">uint32_t&lt;/span> &lt;span class="n">delta&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x9E3779B9&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">/*&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="n">key&lt;/span> &lt;span class="n">schedule&lt;/span> &lt;span class="n">constant&lt;/span> &lt;span class="o">*/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">uint32_t&lt;/span> &lt;span class="n">k0&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">k&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">k1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">k&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">k2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">k&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">k3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">k&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">];&lt;/span> &lt;span class="o">/*&lt;/span> &lt;span class="n">cache&lt;/span> &lt;span class="n">key&lt;/span> &lt;span class="o">*/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="o">/*&lt;/span> &lt;span class="n">basic&lt;/span> &lt;span class="n">cycle&lt;/span> &lt;span class="n">start&lt;/span> &lt;span class="o">*/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">v1&lt;/span> &lt;span class="o">-=&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">v0&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">k2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">v0&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">sum&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">v0&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">k3&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">v0&lt;/span> &lt;span class="o">-=&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">v1&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">k0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">v1&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">sum&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">v1&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">k1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sum&lt;/span> &lt;span class="o">-=&lt;/span> &lt;span class="n">delta&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">v&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">v0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">v1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ne">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">4&lt;/span> &lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">%c&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">,(&lt;/span>&lt;span class="n">v0&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="mh">0xff&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ne">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">4&lt;/span> &lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">%c&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">,(&lt;/span>&lt;span class="n">v1&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="mh">0xff&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="ne">int&lt;/span> &lt;span class="n">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">uint32_t&lt;/span> &lt;span class="n">key1&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mh">0x34333231&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x38373635&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x32313039&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x36353433&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">//&lt;/span> &lt;span class="n">uint32_t&lt;/span> &lt;span class="nb">hash&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mh">0x32a86394&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xaea320ce&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x8d1cbc04&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0xb1228e7a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x11b1318a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xb70ad3aa&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xa2708b62&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x820c8b81&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">uint32_t&lt;/span> &lt;span class="n">hash1&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mh">0x32a86394&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0xaea320ce&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">decrypt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">hash1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">key1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">//&lt;/span> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ne">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">//&lt;/span> &lt;span class="n">uint32_t&lt;/span> &lt;span class="n">h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">//&lt;/span> &lt;span class="n">h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">hash&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">//&lt;/span> &lt;span class="n">h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">hash&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">//&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">%x&lt;/span>&lt;span class="s2"> &lt;/span>&lt;span class="si">%x&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">//&lt;/span> &lt;span class="n">decrypt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">//&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">uint32_t&lt;/span> &lt;span class="n">key2&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mh">0x34333231&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xDBFE99B8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x32313039&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x36353433&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">uint32_t&lt;/span> &lt;span class="n">hash2&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mh">0x8d1cbc04&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0xb1228e7a&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">decrypt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">hash2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">key2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">uint32_t&lt;/span> &lt;span class="n">key3&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mh">0x34333231&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xDBFE99B8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x34403466&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x36353433&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">uint32_t&lt;/span> &lt;span class="n">hash3&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mh">0x11b1318a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xb70ad3aa&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">decrypt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">hash3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">key3&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">uint32_t&lt;/span> &lt;span class="n">key4&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mh">0xDADB5450&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xDBFE99B8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x34403466&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x36353433&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">uint32_t&lt;/span> &lt;span class="n">hash4&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mh">0xa2708b62&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x820c8b81&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">decrypt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">hash4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">key4&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>Flag: &lt;code>ASCIS{M@sT3r_0f_V1rtu4l_m4Ch1n3}&lt;/code>&lt;/p>
&lt;/blockquote></description></item><item><title>Flare-on 2022-the challenge that shall not be named</title><link>https://kudo104.github.io/p/flare-on/</link><pubDate>Wed, 30 Nov 2022 00:00:00 +0000</pubDate><guid>https://kudo104.github.io/p/flare-on/</guid><description>&lt;img src="https://kudo104.github.io/p/flare-on/cover.jpg" alt="Featured image of post Flare-on 2022-the challenge that shall not be named" />&lt;p>Lời đầu tiên mình muốn nói đó là cảm ơn mấy anh em trong &lt;code>KCSC&lt;/code> đã giúp đỡ mình rất nhiều để mình clear Flare-on 2022 sau nhiều ngày.&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/flare-on/flare-on.png"
width="971"
height="833"
srcset="https://kudo104.github.io/p/flare-on/flare-on_hu14996070226467552180.png 480w, https://kudo104.github.io/p/flare-on/flare-on_hu9265413284689533838.png 1024w"
loading="lazy"
alt="Picture 1"
class="gallery-image"
data-flex-grow="116"
data-flex-basis="279px"
>&lt;/p>
&lt;h2 id="tổng-quan">Tổng Quan
&lt;/h2>&lt;p>Đầu tiên mình ném vào &lt;code>Detect it easy&lt;/code> để có các thông tin cơ bản, chương trình dùng pyinstaller để đóng gói.&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/flare-on/1.png"
width="775"
height="495"
srcset="https://kudo104.github.io/p/flare-on/1_hu16622379836115045506.png 480w, https://kudo104.github.io/p/flare-on/1_hu11319716907180976483.png 1024w"
loading="lazy"
alt="Picture 2"
class="gallery-image"
data-flex-grow="156"
data-flex-basis="375px"
>&lt;/p>
&lt;h2 id="unpack--analysis">Unpack &amp;amp; Analysis
&lt;/h2>&lt;p>Sử dụng tool có sẵn &lt;code>PyInstaller Extractor&lt;/code> để unpack,file cần reverse 11.pyc&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/flare-on/2.png"
width="927"
height="178"
srcset="https://kudo104.github.io/p/flare-on/2_hu11483623375663042344.png 480w, https://kudo104.github.io/p/flare-on/2_hu15455755864447496959.png 1024w"
loading="lazy"
alt="Picture 3"
class="gallery-image"
data-flex-grow="520"
data-flex-basis="1249px"
>&lt;/p>
&lt;p>Sử dụng &lt;code>decpmpile3&lt;/code> hay &lt;code>uncompyle6&lt;/code> để decompile &lt;code>pyc&lt;/code> thành &lt;code>py&lt;/code>.&lt;/p>
&lt;p>Sau khi decompile thành file py thì chương trình đã bị &lt;code>pyamor&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/flare-on/3.png"
width="1336"
height="170"
srcset="https://kudo104.github.io/p/flare-on/3_hu5988684803135220736.png 480w, https://kudo104.github.io/p/flare-on/3_hu865642511022074317.png 1024w"
loading="lazy"
alt="Picture 4"
class="gallery-image"
data-flex-grow="785"
data-flex-basis="1886px"
>&lt;/p>
&lt;p>Sau khi chạy file 11.py thì biết cần 1 số thư viện khác thử decompile Crypt.pyc tại vì 11.pyc load thèn này đầu tiên nên mình decompile thèn này,thì thấy thư viện này cũng bị pyamor trong khi python là mã nguồn mở và decompile thì những thèn khác không bị.Do đó Crypt.py đã bị custom.&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/flare-on/4.png"
width="796"
height="130"
srcset="https://kudo104.github.io/p/flare-on/4_hu13416314644955141212.png 480w, https://kudo104.github.io/p/flare-on/4_hu14262536881705633373.png 1024w"
loading="lazy"
alt="Picture 5"
class="gallery-image"
data-flex-grow="612"
data-flex-basis="1469px"
>&lt;/p>
&lt;p>Thử tạo 1 file rỗng Crypt.py thì biết được nó dùng ARC4.Chỉ cần tạo 1 class ARC4 và in ra là được flag&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/flare-on/5.png"
width="874"
height="88"
srcset="https://kudo104.github.io/p/flare-on/5_hu14707598544726403684.png 480w, https://kudo104.github.io/p/flare-on/5_hu18010412748737781461.png 1024w"
loading="lazy"
alt="Picture 6"
class="gallery-image"
data-flex-grow="993"
data-flex-basis="2383px"
>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">class ARC4:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def __init__(self, name):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.name = name
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def encrypt(self,b):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(b)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Flag &lt;code>Pyth0n_Prot3ction_tuRn3d_Up_t0_11@flare-on.com&lt;/code>&lt;/p></description></item><item><title>Namep</title><link>https://kudo104.github.io/p/ctf/</link><pubDate>Tue, 10 Aug 2021 00:00:00 +0000</pubDate><guid>https://kudo104.github.io/p/ctf/</guid><description>&lt;img src="https://kudo104.github.io/p/ctf/cover.jpg" alt="Featured image of post Namep" />&lt;h2 id="phân-tích">Phân tích
&lt;/h2>&lt;p>Chạy file Namep.exe&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/ctf/1.png"
width="558"
height="185"
srcset="https://kudo104.github.io/p/ctf/1_hu15181061634781291037.png 480w, https://kudo104.github.io/p/ctf/1_hu6024079581096725114.png 1024w"
loading="lazy"
alt="Picture 1"
class="gallery-image"
data-flex-grow="301"
data-flex-basis="723px"
>&lt;/p>
&lt;p>Load file vào CFF explorer để biết được file có resource,mình thấy không có định đạng nên chắc đã bị encode.&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/ctf/2.png"
width="602"
height="305"
srcset="https://kudo104.github.io/p/ctf/2_hu7931096207197041101.png 480w, https://kudo104.github.io/p/ctf/2_hu15030490839708645156.png 1024w"
loading="lazy"
alt="Picture 2"
class="gallery-image"
data-flex-grow="197"
data-flex-basis="473px"
>&lt;/p>
&lt;p>Load file vào IDA.&lt;/p>
&lt;p>Sau một lúc phân tích thì biết file này load resource sau đó decode resource và thực thi cái resource.&lt;/p>
&lt;p>Việc decode thực hiện phép xor mặc định với 0x33&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/ctf/3.png"
width="602"
height="291"
srcset="https://kudo104.github.io/p/ctf/3_hu1332694472042415072.png 480w, https://kudo104.github.io/p/ctf/3_hu17234078753308375445.png 1024w"
loading="lazy"
alt="Picture 3"
class="gallery-image"
data-flex-grow="206"
data-flex-basis="496px"
>&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/ctf/4.png"
width="532"
height="129"
srcset="https://kudo104.github.io/p/ctf/4_hu17004942480726041144.png 480w, https://kudo104.github.io/p/ctf/4_hu5135330361691613322.png 1024w"
loading="lazy"
alt="Picture 4"
class="gallery-image"
data-flex-grow="412"
data-flex-basis="989px"
>&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/ctf/5.png"
width="602"
height="239"
srcset="https://kudo104.github.io/p/ctf/5_hu4241806467858770402.png 480w, https://kudo104.github.io/p/ctf/5_hu17469426290844000744.png 1024w"
loading="lazy"
alt="Picture 5"
class="gallery-image"
data-flex-grow="251"
data-flex-basis="604px"
>&lt;/p>
&lt;p>Sau khi mình decode resource thì vẫn không biết đây là gì xin hint từ ông anh mới biết đây là một shellcode.&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/ctf/6.png"
width="602"
height="452"
srcset="https://kudo104.github.io/p/ctf/6_hu6278939473246510195.png 480w, https://kudo104.github.io/p/ctf/6_hu13826315955501591942.png 1024w"
loading="lazy"
alt="Picture 6"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="319px"
>&lt;/p>
&lt;p>Mình run shellcode thì biết nó load 1 file gì đó dump ra và load vào IDA,thì tìm được block này hehe file cần tìm đây rồi.&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/ctf/7.png"
width="518"
height="189"
srcset="https://kudo104.github.io/p/ctf/7_hu9614604382119866174.png 480w, https://kudo104.github.io/p/ctf/7_hu5849369441332641984.png 1024w"
loading="lazy"
alt="Picture 7"
class="gallery-image"
data-flex-grow="274"
data-flex-basis="657px"
>&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/ctf/8.png"
width="602"
height="484"
srcset="https://kudo104.github.io/p/ctf/8_hu15347658507620622970.png 480w, https://kudo104.github.io/p/ctf/8_hu4161253400267681090.png 1024w"
loading="lazy"
alt="Picture 8"
class="gallery-image"
data-flex-grow="124"
data-flex-basis="298px"
>&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/ctf/9.png"
width="468"
height="230"
srcset="https://kudo104.github.io/p/ctf/9_hu17990286272840758432.png 480w, https://kudo104.github.io/p/ctf/9_hu16953154234503469103.png 1024w"
loading="lazy"
alt="Picture 9"
class="gallery-image"
data-flex-grow="203"
data-flex-basis="488px"
>&lt;/p>
&lt;p>Mình trace ngược lên trên thì biết flag có chuỗi con ASCI nếu không có thì in ra thông báo “Noob~” và ngược lại.&lt;/p>
&lt;p>Tiếp tục trace lên trên thì flag được decode bằng mã hóa rc4,mình biết được chuỗi đầu ra nhưng không biết key bao nhiêu byte tiếp tục trace thì key được trả về tại hàm sub_100017A0().Sau một lúc phân tích thì key chỉ có 4 byte,vậy bài này mình đã đủ thông tin để brute.&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/ctf/10.png"
width="544"
height="578"
srcset="https://kudo104.github.io/p/ctf/10_hu5766477848473853846.png 480w, https://kudo104.github.io/p/ctf/10_hu16167557290373244255.png 1024w"
loading="lazy"
alt="Picture 10"
class="gallery-image"
data-flex-grow="94"
data-flex-basis="225px"
>&lt;/p>
&lt;p>Đây là code của mình.&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/ctf/11.png"
width="515"
height="662"
srcset="https://kudo104.github.io/p/ctf/11_hu10595005757073609780.png 480w, https://kudo104.github.io/p/ctf/11_hu5586268795450008243.png 1024w"
loading="lazy"
alt="Picture 11"
class="gallery-image"
data-flex-grow="77"
data-flex-basis="186px"
>&lt;/p>
&lt;h2 id="flag">FLAG
&lt;/h2>&lt;p>&lt;code>ASCIS{a_s1mpl3_pr0toco1}&lt;/code>&lt;/p></description></item><item><title>ASCIS 2020-Crypt</title><link>https://kudo104.github.io/p/ascis/</link><pubDate>Thu, 05 Aug 2021 00:00:00 +0000</pubDate><guid>https://kudo104.github.io/p/ascis/</guid><description>&lt;img src="https://kudo104.github.io/p/ascis/cover.jpg" alt="Featured image of post ASCIS 2020-Crypt" />&lt;h2 id="phân-tích">Phân tích
&lt;/h2>&lt;p>Đây là một chall thực hiện hiện encrypt file,file thưc hiên encrypt với 2 tham số là “file key” và không phải key tùy chọn mà là key mặc định.&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/ascis/1.png"
width="599"
height="147"
srcset="https://kudo104.github.io/p/ascis/1_hu14319903492119563953.png 480w, https://kudo104.github.io/p/ascis/1_hu5163985058612047657.png 1024w"
loading="lazy"
alt="Pictur 1"
class="gallery-image"
data-flex-grow="407"
data-flex-basis="977px"
>&lt;/p>
&lt;p>Load vào IDA ta có flow của chương trình.&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/ascis/2.png"
width="420"
height="446"
srcset="https://kudo104.github.io/p/ascis/2_hu6554779720898008656.png 480w, https://kudo104.github.io/p/ascis/2_hu12180167773128613242.png 1024w"
loading="lazy"
alt="Pictur 2"
class="gallery-image"
data-flex-grow="94"
data-flex-basis="226px"
>&lt;/p>
&lt;p>Mình tìm kiếm chuỗi “wrong key” sau đó trace ngược lên tại hàm sub_55D62DCA75AE() debug thì biết nó thực hiện so sánh 2 chuỗi số nếu đúng thì bắt đầu encrypt file còn không thì hiện lên màn hình “wrong key” như hình bên trên.&lt;/p>
&lt;p>Tiếp tục mình trace theo [rbp+var_240] thì biết input+1483973472739663,sau đó thì tại sub_55D62DCA75AE() so sánh với 4634706992063332.&lt;/p>
&lt;p>He he vậy key=3150733519323669&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/ascis/3.png"
width="602"
height="104"
srcset="https://kudo104.github.io/p/ascis/3_hu2940271138755344922.png 480w, https://kudo104.github.io/p/ascis/3_hu15358689930301776235.png 1024w"
loading="lazy"
alt="Pictur 3"
class="gallery-image"
data-flex-grow="578"
data-flex-basis="1389px"
>&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/ascis/4.png"
width="472"
height="38"
srcset="https://kudo104.github.io/p/ascis/4_hu3058078382233288885.png 480w, https://kudo104.github.io/p/ascis/4_hu5729526173095020321.png 1024w"
loading="lazy"
alt="Pictur 4"
class="gallery-image"
data-flex-grow="1242"
data-flex-basis="2981px"
>&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/ascis/5.png"
width="474"
height="28"
srcset="https://kudo104.github.io/p/ascis/5_hu5148569611664939707.png 480w, https://kudo104.github.io/p/ascis/5_hu10423132947410020453.png 1024w"
loading="lazy"
alt="Pictur 5"
class="gallery-image"
data-flex-grow="1692"
data-flex-basis="4062px"
>&lt;/p>
&lt;p>Bài này tên crypto nên mình thử dùng plugin fincrypto thì biết thực hiện mã hóa file bằng thuật toán mã hóa AES_ECB&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/ascis/6.png"
width="602"
height="80"
srcset="https://kudo104.github.io/p/ascis/6_hu16098422881566576135.png 480w, https://kudo104.github.io/p/ascis/6_hu14101070338446933120.png 1024w"
loading="lazy"
alt="Pictur 6"
class="gallery-image"
data-flex-grow="752"
data-flex-basis="1806px"
>&lt;/p>
&lt;p>Mình đặt bp tại 0x56438FFF5BBB debug thì được key là P4nd`p&amp;lt;c8gE;T$F8&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/ascis/7.png"
width="388"
height="246"
srcset="https://kudo104.github.io/p/ascis/7_hu8214834936002915601.png 480w, https://kudo104.github.io/p/ascis/7_hu12957023718094955797.png 1024w"
loading="lazy"
alt="Pictur 7"
class="gallery-image"
data-flex-grow="157"
data-flex-basis="378px"
>&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/ascis/8.png"
width="571"
height="16"
srcset="https://kudo104.github.io/p/ascis/8_hu9615159291598801436.png 480w, https://kudo104.github.io/p/ascis/8_hu12086252692090143910.png 1024w"
loading="lazy"
alt="Pictur 8"
class="gallery-image"
data-flex-grow="3568"
data-flex-basis="8565px"
>&lt;/p>
&lt;p>Vậy bài này mình đã đủ thông tin,để thực giải mã mình sẽ dùng libary của pycryptodome.&lt;/p>
&lt;p>&lt;img src="https://kudo104.github.io/p/ascis/9.png"
width="375"
height="154"
srcset="https://kudo104.github.io/p/ascis/9_hu13886991944276941398.png 480w, https://kudo104.github.io/p/ascis/9_hu4260544837089369410.png 1024w"
loading="lazy"
alt="Pictur 9"
class="gallery-image"
data-flex-grow="243"
data-flex-basis="584px"
>&lt;/p>
&lt;p>Mình load file decrypt vào CFF thì biết đó là 1 file ảnh .png&lt;/p>
&lt;h2 id="flag">FLAG
&lt;/h2>&lt;p>&lt;code>ASCIS{C4yp1o_1s_5impl3_b4t_C++_i5_cr4z9}&lt;/code>&lt;/p></description></item></channel></rss>